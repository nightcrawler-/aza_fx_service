# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/transactions', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Transaction. As you add validations to Transaction, be sure to
  # adjust the attributes here as well.

  let(:customer) { Customer.create!(name: 'Lizzy Caplan') }

  let(:valid_attributes) do
    {
      input_amount: 900.00,
      input_currency: 'USD',
      output_amount: 900.01,
      output_currency: 'EUR',
      customer_id: customer.id,
      transacted_at: Date.today
    }
  end

  let(:invalid_attributes) do
    {
      input_amount: 900.00,
      input_currency: 'USD',
      output_amount: 0,
      output_currency: 'KWAAAAICH',
      customer_id: 1,
      transacted_at: Date.today
    }
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # TransactionsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Transaction.create! valid_attributes
      get transactions_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      transaction = Transaction.create! valid_attributes
      get transaction_url(transaction), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Transaction' do
        expect do
          post transactions_url,
               params: { transaction: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Transaction, :count).by(1)
      end

      it 'renders a JSON response with the new transaction' do
        post transactions_url,
             params: { transaction: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json; charset=utf-8'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Transaction' do
        expect do
          post transactions_url,
               params: { transaction: invalid_attributes }, as: :json
        end.to change(Transaction, :count).by(0)
      end

      it 'renders a JSON response with errors for the new transaction' do
        post transactions_url,
             params: { transaction: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json; charset=utf-8')
      end
    end
  end
end
